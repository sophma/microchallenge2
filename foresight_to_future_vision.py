import replicate
import base64

def transform_future_vision(image_file, original_image_description, scenario_description, replicate_api_key):
    """
    Transforms an equirectangular 360 image based on a future scenario and original image description using Replicate.

    Args:
    - image_file (UploadedFile): Streamlit UploadedFile object of the original image.
    - original_image_description (str): Description of the original image as generated by GPT model.
    - scenario_description (str): Description of the future scenario.
    - replicate_api_key (str): Replicate API key provided by the user.

    Returns:
    - str: URL to the transformed image.
    """

    # Initialize Replicate client
    client = replicate.Client(api_token=replicate_api_key)

    # Encode the image file to base64
    image_bytes = image_file.getvalue()
    encoded_image = base64.b64encode(image_bytes).decode('utf-8')

    # Prepare the input data for the model
    input_data = {
        "image": f"data:image/jpeg;base64,{encoded_image}",
        "width": 1024,
        "height": 512,
        "prompt": scenario_description,
        "refine": "expert_ensemble_refiner",
        "scheduler": "K_EULER",
        "lora_scale": 0.6,
        "num_outputs": 1,
        "guidance_scale": 7.5,
        "apply_watermark": False,
        "high_noise_frac": 0.8,
        "negative_prompt": "",
        "prompt_strength": 0.8,
        "num_inference_steps": 25
    }

    # Specify the model version
    model_version = "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b"

    try:
        # Create a prediction
        output = client.predictions.create(version=model_version, input=input_data)

        # Assuming the output provides a direct URL to the transformed image
        # This part might need to be adjusted based on the actual output structure
        transformed_image_url = output["urls"][0] if output and "urls" in output else "Error retrieving transformed image URL"
        return transformed_image_url
    except Exception as e:
        print(f"An error occurred: {e}")
        return "Error transforming image."
